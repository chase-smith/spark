#ifndef SITE_CONTENT_STRUCT_INCLUDE
#define SITE_CONTENT_STRUCT_INCLUDE
#include "dobjects.h"
#include "post.h"
#include "misc_page.h"
#include "html_components.h"
#include "theme.h"
#include "tag_posts.h"

// site_content_struct holds all of the content for a site. See the
// README file for details about the folder and file structures
// for a valid site.
typedef struct site_content_struct {
	// The HTML components (header, footer, trailer) for a site.
	html_components_struct html_components;

	// Configuration information for the dark-themed version of the site.
	theme_struct dark_theme;

	// Configuration information for the bright-themed version of the site.
	theme_struct bright_theme;

	// The 'static' (not dynamically generated by Spark) misc_pages
	// for the site. It is a darray that holds misc_page_struct's
	// (not misc_page_struct*'s).
	darray_struct misc_pages;

	// The series for the site. It is a darray that holds series_struct's
	// (not series_struct*'s).
	darray_struct series;

	// All posts in the site that are going to be generated (all posts
	// that have the generate-post flag file). It is a darray that holds
	// post_struct's (not post_struct*'s).
	darray_struct posts;

	// Contains a timestamp of when the site is being generated. Set,
	// but currently unused. May be removed or altered in the future.
	time_t current_time;

	// Contains a mapping of tags to posts. It is a darray that holds
	// tag_posts_struct's (not tag_posts_struct*'s).
	darray_struct tags;
} site_content_struct;

// ===============================
// = site_content_struct functions
// ===============================

// Cleans up all resources used by the site, INCLUDING ALL DARRAY CONTENTS.
// This WILL free all posts, series, etc, so if you eg dynamically create a
// post and add it to a site, calling site_content_free() WILL call
// post_free() for that post.
void site_content_free(site_content_struct* site_content);

// Initializes the darrays and other properties of the site.
void site_content_init(site_content_struct* site_content);

// Tries to find a tag_posts_struct for the given tag.
// Returns NULL if no such tag_posts_struct exists in the site.
tag_posts_struct* find_tag_posts_by_tag(site_content_struct* site_content, const char* tag);

// Tries to find a post_struct with the given post ID/folder name.
// Returns NULL if no such post exists in the site.
post_struct* find_post_by_folder_name(site_content_struct* site_content, const char* post_id);

// Tries to find a series with the given series ID/folder name.
// Returns NULL if no such series exists in the site.
series_struct* find_series_by_folder_name(site_content_struct* site_content, const char* series_id);

// Tries to find a misc_page with the given misc page filename
// (eg "index.html").
// Returns NULL if no such misc page exists in the site.
misc_page_struct* find_misc_page_by_filename(site_content_struct* site_content, const char* filename);

// Sets up the list of tags for the site. Must be called after all posts have
// been loaded.
// Returns 0 on error.
int site_content_setup_tags(site_content_struct* site_content);

// Validates that all posts contain valid post IDs and series IDs (as set by
// the 'series', 'suggested-next-reading', and 'suggested-prev-reading' files).
// Also sets up pointers/darrays for the aforementioned items, and adds each
// post to its series darray.
// TODO: The name is misleading, as it does more than just validation. As such,
// the name will likely be changed in the future.
// Returns 0 on error.
int validate_posts(site_content_struct* site_content);

#endif
